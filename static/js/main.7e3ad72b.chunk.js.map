{"version":3,"sources":["components/ColorPickerList.js","components/Note.js","components/NewNoteForm.js","helpers/localStorage.js","App.js","index.js"],"names":["colors","ColorPickerList","handleColorPick","useState","color","setColor","FormControl","InputLabel","id","Select","labelId","value","onChange","event","target","map","col","MenuItem","style","useStyles","makeStyles","root","minWidth","maxWidth","title","pos","marginBottom","delete","marginLeft","Note","props","classes","noteObj","pinned","setPinned","Grid","item","Card","className","CardHeader","action","FormControlLabel","control","Checkbox","icon","FavoriteBorder","checkedIcon","Favorite","name","checked","newPinned","onPinChange","subheader","Date","createdAt","toLocaleDateString","backgroundColor","CardContent","Typography","variant","component","content","CardActions","IconButton","aria-label","onClick","onDelete","colorToChange","onColorChange","NewNoteForm","note","setNote","change","e","Paper","TextField","Button","label","preventDefault","noteAdd","submit","key","ls","getNotes","ret","JSON","parse","localStorage","getItem","setNotes","notes","setItem","stringify","App","noteList","setNoteList","useEffect","isPinned","newNoteList","newColor","noteDelete","filter","element","Container","now","length","Divider","container","direction","justify","alignItems","spacing","n","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.7e3ad72b.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\r\n\r\nconst colors = [\r\n    '#3EBA9B',\r\n    '#F5E4AC',\r\n    '#FEAD34',\r\n    '#DA3C3D',\r\n    '#ffffff',\r\n]\r\n\r\nexport const ColorPickerList = ({ handleColorPick }) => {\r\n    const [color, setColor] = useState('#ffffff')\r\n\r\n\r\n    const handleColorChange = (event) => {\r\n        setColor(event.target.value)\r\n        handleColorPick(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <FormControl >\r\n            <InputLabel id=\"demo-simple-select-label\">Color</InputLabel>\r\n            <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={color}\r\n                onChange={handleColorChange}\r\n            >\r\n                {colors.map((col)=>{\r\n                    return <MenuItem key={col} value={col}><FiberManualRecordIcon style={{ color: col }} /> </MenuItem>\r\n                })}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { FormControlLabel, Checkbox, IconButton, CardHeader } from '@material-ui/core';\r\n\r\nimport { Favorite, FavoriteBorder } from '@material-ui/icons';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { ColorPickerList } from './ColorPickerList';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275,\r\n        maxWidth: 400,\r\n    },\r\n    title: {\r\n\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n    delete: {\r\n        marginLeft: \"auto\",\r\n    },\r\n});\r\n\r\nexport default function Note(props) {\r\n    const classes = useStyles();\r\n\r\n    const [pinned, setPinned] = useState(props.noteObj.pinned)\r\n    const [color, setColor] = useState(props.noteObj.color)\r\n\r\n    const pinHandler = () => {\r\n        const newPinned = !pinned\r\n        setPinned(newPinned)\r\n        props.onPinChange(props.noteObj.id, newPinned)\r\n    }\r\n\r\n    const handleColorChange = (colorToChange) => {\r\n        setColor(colorToChange)\r\n        props.onColorChange(props.noteObj.id, colorToChange)\r\n    }\r\n\r\n    const deleteHandler = () => {\r\n        props.onDelete(props.noteObj.id)\r\n    }\r\n\r\n    return (\r\n        <Grid item >\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    action={\r\n                        <FormControlLabel\r\n                            control={<Checkbox\r\n                                icon={<FavoriteBorder />}\r\n                                checkedIcon={<Favorite />}\r\n                                name=\"pinned\"\r\n                                checked={props.noteObj.pinned}\r\n                                onChange={pinHandler}\r\n                            />}\r\n                        />\r\n                    }\r\n                    title={props.noteObj.title}\r\n                    subheader={new Date(props.noteObj.createdAt).toLocaleDateString()}\r\n                    style={{backgroundColor: color}}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                        {props.noteObj.content}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <IconButton aria-label=\"delete\" className={classes.delete} onClick={deleteHandler}>\r\n                        <DeleteForeverIcon />\r\n                    </IconButton>\r\n                    <ColorPickerList handleColorPick={handleColorChange} />\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n\r\n    );\r\n}","import { TextField, Button, Paper } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\n\r\n\r\nconst NewNoteForm = (props) => {\r\n    const [note, setNote] = useState({\r\n        title: \"\",\r\n        content: \"\",\r\n        color: \"\",\r\n    })\r\n\r\n    const change = e => {\r\n        setNote({\r\n            ...note,\r\n            [e.target.name]: e.target.value\r\n        });\r\n      };\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault()\r\n        props.noteAdd(note);\r\n        setNote({\r\n            title: \"\",\r\n            content: \"\",\r\n            color: \"\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Paper>\r\n            <form>\r\n                    <TextField\r\n                        name=\"title\"\r\n                        value={note.title}\r\n                        onChange={e => change(e)}\r\n                        \r\n                    />\r\n                    <br />\r\n                    <TextField\r\n                        name=\"content\"\r\n                        value={note.content}\r\n                        onChange={e => change(e)}\r\n                        \r\n                    />\r\n                    <br />\r\n                    <Button label=\"Submit\" onClick={e => submit(e)}>Add Note</Button>\r\n            </form>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default NewNoteForm\r\n","const key = 'NoteApp'\r\n\r\nconst ls = {\r\n    getNotes: () => {\r\n        const ret = JSON.parse(localStorage.getItem(key))\r\n        return ret != null ? ret : []\r\n    },\r\n\r\n    setNotes: (notes) => {\r\n        return localStorage.setItem(key, JSON.stringify(notes));\r\n    },\r\n}\r\n\r\nexport default ls\r\n","import './App.css';\nimport 'fontsource-roboto';\nimport Note from './components/Note';\nimport NewNoteForm from './components/NewNoteForm';\nimport { Container, Grid, Divider, Paper } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport ls from './helpers/localStorage'\n\n\nconst App = () => {\n  const [noteList, setNoteList] = useState([])\n\n  // useState([\n  //   {\n  //     id: 0,\n  //     title: \"tytuł\",\n  //     content: \"miejsce na pisanie\",\n  //     pinned: true,\n  //     createdAt: Date.now()\n  //   },\n  //   {\n  //     id: 1,\n  //     title: \"tytułaaa\",\n  //     content: \"miejsce na pisanie\",\n  //     pinned: true,\n  //     createdAt: Date.now()\n  //   },\n  //   {\n  //     id: 2,\n  //     title: \"tytuł\",\n  //     content: \"miejsce na pisanie\",\n  //     pinned: true,\n  //     createdAt: Date.now()\n  //   },\n  //   {\n  //     id: 3,\n  //     title: \"tytl\",\n  //     content: \"test\",\n  //     pinned: false,\n  //     createdAt: Date.now()\n  //   },\n  //   {\n  //     id: 4,\n  //     title: \"napisać na zajęcia więcej kodu\",\n  //     content: \"ilość\",\n  //     pinned: true,\n  //     createdAt: Date.now()\n  //   }\n  // ]\n  // )\n\n\n\n  useEffect(() => {\n    setNoteList(ls.getNotes())\n    return () => {\n\n    }\n  }, [])\n\n  const onPinChange = (id, isPinned) => {\n    const newNoteList = noteList.map((note, key) => {\n      note.pinned = note.id === id ? isPinned : note.pinned;\n      return note\n    })\n    //newNoteList[id].pinned = isPinned\n    setNoteList(newNoteList)\n    ls.setNotes(newNoteList)\n  }\n\n  const onColorChange = (id, newColor) => {\n    const newNoteList = noteList.map((note, key) => {\n      note.color = note.id === id ? newColor : note.color;\n      return note\n    })\n    setNoteList(newNoteList)\n    ls.setNotes(newNoteList)\n  }\n\n  const noteDelete = (id) => {\n    const newNoteList = noteList.filter((element) => {\n      return element.id !== id\n    }, id)\n    setNoteList(newNoteList)\n    ls.setNotes(newNoteList)\n  }\n\n  const noteAdd = (note) => {\n    note.pinned = false\n    note.color = '#ffffff'\n    note.createdAt = Date.now()\n    note.id = noteList.length - 1 \n    setNoteList([...noteList, note])\n    ls.setNotes([...noteList, note])\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <NewNoteForm noteAdd={noteAdd} />\n        <br /><Divider /><br />\n        <Paper>\n          <Grid container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n            spacing={3}\n          >\n\n            {noteList.map((n) => {\n              return (<Note key={n.id} noteObj={n} onPinChange={onPinChange} onColorChange={onColorChange} onDelete={noteDelete} />)\n            })}\n\n          </Grid>\n        </Paper>\n\n      </Container>\n    </div>\n  )\n};\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}